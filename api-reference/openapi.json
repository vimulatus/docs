{
  "openapi": "3.0.0",
  "paths": {
    "/company": {
      "post": {
        "operationId": "CompanyController_createCompany",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompanyResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a company",
        "tags": [
          "Company"
        ]
      },
      "get": {
        "operationId": "CompanyController_getAllCompaniesByUser",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "description": "The id of the user for which the companies are to be fetched. This is a temporary solution. In future, the JWT token will be used to get the user id.",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "default",
            "required": false,
            "in": "query",
            "description": "If true, only the default company is returned.",
            "schema": {
              "default": false,
              "example": false,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllCompaniesResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all companies by user.",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/{id}": {
      "get": {
        "operationId": "CompanyController_getCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the company",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompanyResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get a company by id",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/default": {
      "patch": {
        "operationId": "CompanyController_updateDefaultCompany",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "description": "The id of the user for which the default company is to be updated",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "required": true,
            "in": "query",
            "description": "The id of the company to be set as default",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": "The default company for the user has been updated successfully"
          }
        },
        "summary": "Update the default company for a user",
        "tags": [
          "Company"
        ]
      }
    },
    "/user": {
      "post": {
        "operationId": "UserController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a user",
        "tags": [
          "User"
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "operationId": "UserController_getUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get a user by id",
        "tags": [
          "User"
        ]
      }
    },
    "/auth/group": {
      "get": {
        "operationId": "GroupController_getGroups",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompanyGroupsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all groups in a company",
        "tags": [
          "Company / Auth / Group"
        ]
      },
      "post": {
        "operationId": "GroupController_createGroup",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a group",
        "tags": [
          "Company / Auth / Group"
        ]
      }
    },
    "/auth/role/{id}": {
      "get": {
        "operationId": "RoleController_findById",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRoleResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get a role by id",
        "tags": [
          "Company / Auth / Role"
        ]
      }
    },
    "/auth/role": {
      "post": {
        "operationId": "RoleController_create",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRoleResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a role",
        "tags": [
          "Company / Auth / Role"
        ]
      },
      "get": {
        "operationId": "RoleController_findAll",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllRolesResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all roles",
        "tags": [
          "Company / Auth / Role"
        ]
      }
    },
    "/bookkeeping/account-group": {
      "post": {
        "operationId": "AccountGroupController_createAccountGroup",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a new account group",
        "tags": [
          "Company / Bookkeeping / Account Group"
        ]
      },
      "get": {
        "operationId": "AccountGroupController_getAccountGroups",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllAccountGroupsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all account groups",
        "tags": [
          "Company / Bookkeeping / Account Group"
        ]
      }
    },
    "/bookkeeping/account-group/{id}": {
      "get": {
        "operationId": "AccountGroupController_getAccountGroup",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get an account group by id",
        "tags": [
          "Company / Bookkeeping / Account Group"
        ]
      }
    },
    "/bookkeeping/account": {
      "post": {
        "operationId": "AccountController_createAccount",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a new account",
        "tags": [
          "Company / Bookkeeping / Account"
        ]
      },
      "get": {
        "operationId": "AccountController_getAllAccounts",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllAccountsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all accounts",
        "tags": [
          "Company / Bookkeeping / Account"
        ]
      }
    },
    "/bookkeeping/account/{id}": {
      "get": {
        "operationId": "AccountController_getAccount",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get an account by id",
        "tags": [
          "Company / Bookkeeping / Account"
        ]
      }
    },
    "/bookkeeping/control-account": {
      "get": {
        "operationId": "ControlAccountController_getAll",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nature",
            "required": false,
            "in": "query",
            "description": "Filter by the nature of the account",
            "schema": {
              "example": "PERSONAL",
              "enum": [
                "PERSONAL",
                "NOMINAL",
                "REAL"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by the type of the account",
            "schema": {
              "example": "ASSET",
              "enum": [
                "ASSET",
                "LIABILITY",
                "EQUITY",
                "INCOME",
                "EXPENSE"
              ],
              "type": "string"
            }
          },
          {
            "name": "nominalBalance",
            "required": false,
            "in": "query",
            "description": "Filter by the nominal balance of the account",
            "schema": {
              "example": "DEBIT",
              "enum": [
                "DEBIT",
                "CREDIT"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllControlAccountsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all control accounts",
        "tags": [
          "Company / Bookkeeping / Control Account"
        ]
      }
    },
    "/bookkeeping/control-account/{id}": {
      "get": {
        "operationId": "ControlAccountController_getOne",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetControlAccountResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get a control account by id",
        "tags": [
          "Company / Bookkeeping / Control Account"
        ]
      }
    },
    "/inventory/item/{id}": {
      "get": {
        "operationId": "ItemController_find",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the item to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItemResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get an item by id",
        "tags": [
          "Company / Inventory / Item"
        ]
      },
      "delete": {
        "operationId": "ItemController_delete",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the item to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": "Item deleted successfully"
          }
        },
        "summary": "Delete an item by id",
        "tags": [
          "Company / Inventory / Item"
        ]
      }
    },
    "/inventory/item": {
      "get": {
        "operationId": "ItemController_findAll",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllItemsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all items",
        "tags": [
          "Company / Inventory / Item"
        ]
      },
      "post": {
        "operationId": "ItemController_create",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItemResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create an item",
        "tags": [
          "Company / Inventory / Item"
        ]
      }
    },
    "/inventory/item-group": {
      "post": {
        "operationId": "ItemGroupController_create",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItemGroupResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a new item group",
        "tags": [
          "Company / Inventory / Item Group"
        ]
      },
      "get": {
        "operationId": "ItemGroupController_findAll",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllItemGroupsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all item groups",
        "tags": [
          "Company / Inventory / Item Group"
        ]
      }
    },
    "/inventory/item-group/{id}": {
      "get": {
        "operationId": "ItemGroupController_get",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the item group to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItemGroupResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get an item group by id",
        "tags": [
          "Company / Inventory / Item Group"
        ]
      }
    },
    "/inventory/item-tag": {
      "post": {
        "operationId": "ItemTagController_createItemTag",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItemTagResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a new item tag",
        "tags": [
          "Company / Inventory / Item Tag"
        ]
      },
      "get": {
        "operationId": "ItemTagController_getAll",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withAttributes",
            "required": false,
            "in": "query",
            "description": "Whether to include attributes",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "Filter by Item Tag IDs",
            "schema": {
              "example": [
                "123",
                "456"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllItemTagsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all item tags",
        "tags": [
          "Company / Inventory / Item Tag"
        ]
      }
    },
    "/inventory/item-tag/{id}": {
      "get": {
        "operationId": "ItemTagController_get",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the item tag to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItemTagResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get an item tag by id",
        "tags": [
          "Company / Inventory / Item Tag"
        ]
      },
      "patch": {
        "operationId": "ItemTagController_update",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the item tag to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetItemTagResponseDto"
                }
              }
            }
          }
        },
        "summary": "Update an item tag by id",
        "tags": [
          "Company / Inventory / Item Tag"
        ]
      }
    },
    "/inventory/unit": {
      "get": {
        "operationId": "UnitController_findOne",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnitResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get a unit",
        "tags": [
          "Company / Inventory / Unit"
        ]
      },
      "post": {
        "operationId": "UnitController_create",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnitDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnitResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a unit",
        "tags": [
          "Company / Inventory / Unit"
        ]
      }
    },
    "/inventory/unit/all": {
      "get": {
        "operationId": "UnitController_findAll",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllUnitsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all units",
        "tags": [
          "Company / Inventory / Unit"
        ]
      }
    },
    "/inventory/unit/{sourceunitid}/conversion/{destUnitId}": {
      "post": {
        "operationId": "UnitConversionController_create",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceUnitId",
            "required": true,
            "in": "path",
            "description": "The id of the source unit to create conversion for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destUnitId",
            "required": true,
            "in": "path",
            "description": "The id of the destination unit to create conversion for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnitConversionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnitConversionResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a unit conversion",
        "tags": [
          "Company / Inventory / Unit / Conversion"
        ]
      },
      "patch": {
        "operationId": "UnitConversionController_update",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceUnitId",
            "required": true,
            "in": "path",
            "description": "The id of the source unit to update conversion for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destUnitId",
            "required": true,
            "in": "path",
            "description": "The id of the destination unit to update conversion for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUnitConversionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnitConversionResponseDto"
                }
              }
            }
          }
        },
        "summary": "Update a unit conversion",
        "tags": [
          "Company / Inventory / Unit / Conversion"
        ]
      },
      "delete": {
        "operationId": "UnitConversionController_delete",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceUnitId",
            "required": true,
            "in": "path",
            "description": "The id of the source unit to delete conversion for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destUnitId",
            "required": true,
            "in": "path",
            "description": "The id of the destination unit to delete conversion for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": "The unit conversion was deleted successfully"
          }
        },
        "summary": "Delete a unit conversion",
        "tags": [
          "Company / Inventory / Unit / Conversion"
        ]
      }
    },
    "/inventory/unit/{sourceunitid}/conversion": {
      "get": {
        "operationId": "UnitConversionController_getAll",
        "parameters": [
          {
            "name": "x-company-id",
            "in": "header",
            "description": "The id of the current active company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceUnitId",
            "required": true,
            "in": "path",
            "description": "The id of the source unit to search conversions for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllUnitConversionsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all unit conversions of a source unit",
        "tags": [
          "Company / Inventory / Unit / Conversion"
        ]
      }
    }
  },
  "info": {
    "title": "ERP API",
    "description": "API for ERP",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "erp",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "LogoOrIcon": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "logo",
              "icon"
            ],
            "description": "The type of the logo or icon",
            "example": "logo"
          },
          "urlOrName": {
            "type": "string",
            "description": "The url or name of the logo or icon",
            "example": "https://example.com/logo.png"
          }
        },
        "required": [
          "type",
          "urlOrName"
        ]
      },
      "CreateCompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the company",
            "example": "Acme Corp"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the company",
            "example": "A company that makes widgets"
          },
          "gstin": {
            "type": "string",
            "nullable": true,
            "description": "The GSTIN of the company",
            "example": "29AAACD1234E1Z5"
          },
          "logoOrIcon": {
            "description": "The logo or lucide icon name of the company",
            "example": {
              "type": "logo",
              "urlOrName": "https://example.com/logo.png"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/LogoOrIcon"
              }
            ]
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of the company",
            "example": "IN",
            "default": "IN"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the company",
            "example": "INR",
            "default": "INR"
          },
          "createdById": {
            "type": "string",
            "description": "The id of the user who created the company",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "name",
          "logoOrIcon",
          "countryCode",
          "currencyCode",
          "createdById"
        ]
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the company",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the company",
            "example": "Acme Corp"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the company",
            "example": "A company that makes widgets"
          },
          "gstin": {
            "type": "string",
            "nullable": true,
            "description": "The GSTIN of the company",
            "example": "29AAACD1234E1Z5"
          },
          "logoOrIcon": {
            "$ref": "#/components/schemas/LogoOrIcon"
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of the company",
            "example": "IN",
            "default": "IN"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the company",
            "example": "INR",
            "default": "INR"
          }
        },
        "required": [
          "id",
          "name",
          "logoOrIcon",
          "countryCode",
          "currencyCode"
        ]
      },
      "GetCompanyResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/CompanyDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "SummarisedCompanyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the company",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the company",
            "example": "Acme Corp"
          },
          "logoOrIcon": {
            "$ref": "#/components/schemas/LogoOrIcon"
          }
        },
        "required": [
          "id",
          "name",
          "logoOrIcon"
        ]
      },
      "GetAllCompaniesResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarisedCompanyDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The keycloak id of the user",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "username": {
            "type": "string",
            "description": "The username of the user",
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the user",
            "example": "john.doe@example.com"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether the email is verified",
            "example": true
          },
          "phone": {
            "type": "object",
            "description": "The phone number of the user",
            "example": "+919876543210"
          },
          "phoneVerified": {
            "type": "boolean",
            "description": "Whether the phone number is verified",
            "example": true
          },
          "avatar": {
            "type": "object",
            "description": "The avatar of the user",
            "example": "https://example.com/avatar.png"
          }
        },
        "required": [
          "id",
          "name",
          "username",
          "email"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "username": {
            "type": "string",
            "description": "The username of the user",
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the user",
            "example": "john.doe@example.com"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether the email is verified",
            "example": true
          },
          "gender": {
            "type": "object",
            "description": "The gender of the user",
            "example": "Male"
          },
          "dob": {
            "format": "date-time",
            "type": "string",
            "nullable": true,
            "description": "The date of birth of the user",
            "example": "1990-01-01"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "format": "mobile-phone",
            "description": "The phone number of the user",
            "example": "+919876543210"
          },
          "phoneVerified": {
            "type": "boolean",
            "description": "Whether the phone number is verified",
            "example": true
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "description": "The avatar of the user",
            "example": "https://example.com/avatar.png"
          },
          "age": {
            "type": "number",
            "nullable": true,
            "description": "The age of the user",
            "example": 25
          }
        },
        "required": [
          "id",
          "name",
          "username",
          "email",
          "gender",
          "phoneVerified"
        ]
      },
      "GetUserResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/UserDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "GetCompanyGroupsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group",
            "example": "Marketing Team"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateGroupResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/GroupDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "description"
        ]
      },
      "GetRoleResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/RoleDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the role",
            "example": "Admin"
          },
          "description": {
            "type": "string",
            "description": "The description of the role",
            "example": "Admin role"
          }
        },
        "required": [
          "name"
        ]
      },
      "SummarisedRoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GetAllRolesResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarisedRoleDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateAccountGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the account group",
            "example": "Customers"
          },
          "controlAccountId": {
            "type": "number",
            "description": "The control account id",
            "example": 1
          }
        },
        "required": [
          "name",
          "controlAccountId"
        ]
      },
      "AccountGroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the account group",
            "example": "Assets"
          },
          "controlAccountId": {
            "type": "number",
            "description": "The control account id of the account group",
            "example": 1
          }
        },
        "required": [
          "id",
          "name",
          "controlAccountId"
        ]
      },
      "GetAccountGroupResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "description": "The account group",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountGroupDto"
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "SummarisedAccountGroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the account group",
            "example": "Assets"
          },
          "controlAccountId": {
            "type": "number",
            "description": "The control account id of the account group",
            "example": 1
          }
        },
        "required": [
          "id",
          "name",
          "controlAccountId"
        ]
      },
      "GetAllAccountGroupsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "description": "The account groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarisedAccountGroupDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreatePersonalAccountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Cash"
          },
          "groupId": {
            "type": "string",
            "description": "The id of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the account",
            "example": "PERSONAL",
            "enum": [
              "PERSONAL",
              "NOMINAL",
              "REAL"
            ]
          },
          "gstin": {
            "type": "object",
            "description": "The GSTIN of the account",
            "example": "29AABCD1234E1Z5"
          },
          "addressId": {
            "type": "object",
            "description": "The id of the address",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "bankAccountId": {
            "type": "object",
            "description": "The id of the bank account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "name",
          "groupId",
          "type"
        ]
      },
      "CreateNominalAccountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Cash"
          },
          "groupId": {
            "type": "string",
            "description": "The id of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the account",
            "example": "PERSONAL",
            "enum": [
              "PERSONAL",
              "NOMINAL",
              "REAL"
            ]
          }
        },
        "required": [
          "name",
          "groupId",
          "type"
        ]
      },
      "CreateRealAccountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Cash"
          },
          "groupId": {
            "type": "string",
            "description": "The id of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the account",
            "example": "PERSONAL",
            "enum": [
              "PERSONAL",
              "NOMINAL",
              "REAL"
            ]
          }
        },
        "required": [
          "name",
          "groupId",
          "type"
        ]
      },
      "CreateAccountDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data of the account",
            "oneOf": [
              {
                "type": "object",
                "$ref": "#/components/schemas/CreatePersonalAccountDto"
              },
              {
                "type": "object",
                "$ref": "#/components/schemas/CreateNominalAccountDto"
              },
              {
                "type": "object",
                "$ref": "#/components/schemas/CreateRealAccountDto"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "PersonalAccountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Cash"
          },
          "groupId": {
            "type": "string",
            "description": "The id of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the account",
            "example": "PERSONAL",
            "enum": [
              "PERSONAL",
              "NOMINAL",
              "REAL"
            ]
          },
          "gstin": {
            "type": "object",
            "description": "The GSTIN of the account",
            "example": "29AABCD1234E1Z5"
          },
          "addressId": {
            "type": "object",
            "description": "The id of the address",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "bankAccountId": {
            "type": "object",
            "description": "The id of the bank account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "id",
          "name",
          "groupId",
          "type"
        ]
      },
      "NominalAccountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Cash"
          },
          "groupId": {
            "type": "string",
            "description": "The id of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the account",
            "example": "PERSONAL",
            "enum": [
              "PERSONAL",
              "NOMINAL",
              "REAL"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "groupId",
          "type"
        ]
      },
      "RealAccountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Cash"
          },
          "groupId": {
            "type": "string",
            "description": "The id of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the account",
            "example": "PERSONAL",
            "enum": [
              "PERSONAL",
              "NOMINAL",
              "REAL"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "groupId",
          "type"
        ]
      },
      "GetAccountResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "description": "The data of the account",
            "oneOf": [
              {
                "type": "object",
                "$ref": "#/components/schemas/PersonalAccountDto"
              },
              {
                "type": "object",
                "$ref": "#/components/schemas/NominalAccountDto"
              },
              {
                "type": "object",
                "$ref": "#/components/schemas/RealAccountDto"
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "SummarisedAccountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Cash"
          },
          "groupId": {
            "type": "string",
            "description": "The id of the account group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the account",
            "example": "PERSONAL",
            "enum": [
              "PERSONAL",
              "NOMINAL",
              "REAL"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "groupId",
          "type"
        ]
      },
      "GetAllAccountsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarisedAccountDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "AccountNature": {
        "type": "string",
        "enum": [
          "PERSONAL",
          "REAL",
          "NOMINAL"
        ]
      },
      "AccountType": {
        "type": "string",
        "enum": [
          "ASSET",
          "LIABILITY",
          "EQUITY",
          "INCOME",
          "EXPENSE"
        ]
      },
      "BalanceType": {
        "type": "string",
        "enum": [
          "DEBIT",
          "CREDIT"
        ]
      },
      "ControlAccountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The unique identifier of the control account",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the control account",
            "example": "Cash"
          },
          "nature": {
            "description": "The nature of the control account",
            "example": "PERSONAL",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountNature"
              }
            ]
          },
          "type": {
            "description": "The type of the control account",
            "example": "ASSET",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountType"
              }
            ]
          },
          "nominalBalance": {
            "description": "The nominal balance type of the control account",
            "example": "DEBIT",
            "allOf": [
              {
                "$ref": "#/components/schemas/BalanceType"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "nature",
          "type",
          "nominalBalance"
        ]
      },
      "GetAllControlAccountsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "description": "The control accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ControlAccountDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetControlAccountResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "description": "The control account",
            "allOf": [
              {
                "$ref": "#/components/schemas/ControlAccountDto"
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "ItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the item",
            "example": "Gold Ring"
          },
          "id": {
            "type": "string",
            "description": "The id of the item",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sku": {
            "type": "string",
            "description": "The sku of the item",
            "example": "GR-5-10K-101"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the item",
            "example": "Gold ring with 10K gold and 5mm diameter"
          },
          "unitId": {
            "type": "string",
            "description": "The id of the unit of the item",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "cost": {
            "type": "number",
            "minimum": 0,
            "description": "The cost of the item. Minimum value is 0",
            "example": 100
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "description": "The price of the item. Minimum value is 0",
            "example": 150
          },
          "msp": {
            "type": "number",
            "minimum": 0,
            "description": "The msp of the item. Minimum value is 0",
            "example": 120
          },
          "reorderPoint": {
            "type": "number",
            "minimum": 0,
            "description": "The reorder point of the item. Minimum value is 0",
            "example": 10
          },
          "meta": {
            "type": "object",
            "description": "The meta of the item"
          }
        },
        "required": [
          "name",
          "id",
          "sku",
          "unitId",
          "cost",
          "price",
          "msp",
          "reorderPoint"
        ]
      },
      "GetItemResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/ItemDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "SummarisedItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the item",
            "example": "Gold Ring"
          },
          "id": {
            "type": "string",
            "description": "The id of the item",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sku": {
            "type": "string",
            "description": "The sku of the item",
            "example": "GR-5-10K-101"
          },
          "unitId": {
            "type": "string",
            "description": "The id of the unit of the item",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "reorderPoint": {
            "type": "number",
            "minimum": 0,
            "description": "The reorder point of the item. Minimum value is 0",
            "example": 10
          },
          "closingStock": {
            "type": "number",
            "minimum": 0,
            "description": "The closing stock of the item",
            "example": 10
          }
        },
        "required": [
          "name",
          "id",
          "sku",
          "unitId",
          "reorderPoint",
          "closingStock"
        ]
      },
      "GetAllItemsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarisedItemDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the item",
            "example": "Apple"
          },
          "sku": {
            "type": "string",
            "description": "The SKU of the item",
            "example": "APPLE-123"
          },
          "unitId": {
            "type": "string",
            "description": "The unit id of the item",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "cost": {
            "type": "number",
            "minimum": 0,
            "description": "The cost of the item. Minimum value is 0",
            "example": 1.99
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "description": "The price of the item. Minimum value is 0",
            "example": 2.99
          },
          "msp": {
            "type": "number",
            "minimum": 0,
            "description": "The minimum selling price of the item. Minimum value is 0",
            "example": 2.89
          },
          "reorderPoint": {
            "type": "number",
            "minimum": 0,
            "description": "The reorder point of the item. Minimum value is 0",
            "example": 10
          },
          "description": {
            "type": "string",
            "description": "The description of the item",
            "example": "A delicious apple"
          },
          "openingStock": {
            "type": "number",
            "minimum": 0,
            "description": "The opening stock of the item. Minimum value is 0",
            "example": 10
          },
          "tagIds": {
            "description": "The tag ids of the item",
            "example": [
              "123e4567-e89b-12d3-a456-426614174000",
              "123e4567-e89b-12d3-a456-426614174001"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "type": "object",
            "description": "The meta data of the item.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "color": "red",
              "temperature": "20°C"
            }
          }
        },
        "required": [
          "name",
          "unitId",
          "cost",
          "price",
          "openingStock"
        ]
      },
      "CreateItemGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the item group",
            "example": "Electronics"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the item group",
            "example": "A group of electronics items"
          },
          "accountId": {
            "type": "string",
            "description": "The account id to link to. For example `Stock-in-Hand`",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "name",
          "accountId"
        ]
      },
      "ItemGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the item group",
            "example": "Gold Jewelry"
          },
          "id": {
            "type": "string",
            "description": "The id of the item group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the item group",
            "example": "Item Group 1 Description"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "GetItemGroupResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/ItemGroupDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "SummarisedItemGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the item group",
            "example": "Gold Jewelry"
          },
          "id": {
            "type": "string",
            "description": "The id of the item group",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "GetAllItemGroupsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarisedItemGroupDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "ItemTagAttributeDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the attribute",
            "example": "color"
          },
          "values": {
            "description": "The constrained values of the attribute. The value for this key must be one of the values in the array.",
            "example": [
              "red",
              "blue",
              "green"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required": {
            "type": "boolean",
            "description": "Whether the attribute is required",
            "example": true
          }
        },
        "required": [
          "key",
          "required"
        ]
      },
      "CreateItemTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the item tag",
            "example": "Clothing"
          },
          "description": {
            "type": "string",
            "description": "The description of the item tag",
            "example": "Clothing items"
          },
          "attributes": {
            "description": "The attributes of the item tag",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemTagAttributeDto"
            }
          }
        },
        "required": [
          "name",
          "attributes"
        ]
      },
      "ItemTagDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the item tag",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the item tag",
            "example": "Clothing"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the item tag",
            "example": "Clothing items"
          },
          "attributes": {
            "description": "The attributes of the item tag",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemTagAttributeDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "attributes"
        ]
      },
      "GetItemTagResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "description": "The item tag",
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemTagDto"
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "SummarisedItemTagDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the item tag",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the item tag",
            "example": "Clothing"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SummarisedItemTagWithAttributesDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the item tag",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the item tag",
            "example": "Clothing"
          },
          "attributes": {
            "description": "The attributes of the item tag",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemTagAttributeDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "attributes"
        ]
      },
      "GetAllItemTagsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "description": "The item tags",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SummarisedItemTagDto"
                },
                {
                  "$ref": "#/components/schemas/SummarisedItemTagWithAttributesDto"
                }
              ]
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateItemTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the item tag",
            "example": "Clothing"
          },
          "description": {
            "type": "string",
            "description": "The description of the item tag",
            "example": "Clothing items"
          },
          "attributes": {
            "description": "The attributes of the item tag",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemTagAttributeDto"
            }
          }
        }
      },
      "UnitDisplayNameDto": {
        "type": "object",
        "properties": {
          "plural": {
            "type": "string",
            "description": "The plural form of the unit",
            "example": "Kilograms"
          },
          "singular": {
            "type": "string",
            "description": "The singular form of the unit",
            "example": "Kilogram"
          },
          "abbreviation": {
            "type": "string",
            "description": "The abbreviation of the unit",
            "example": "kg"
          }
        },
        "required": [
          "singular"
        ]
      },
      "UnitDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the unit",
            "example": "Kilogram"
          },
          "id": {
            "type": "string",
            "description": "The id of the unit",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "displayName": {
            "description": "The display name of the unit",
            "example": {
              "plural": "Kilograms",
              "singular": "Kilogram",
              "abbreviation": "kg"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitDisplayNameDto"
              }
            ]
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the unit",
            "example": "A unit of mass"
          }
        },
        "required": [
          "name",
          "id",
          "displayName"
        ]
      },
      "GetUnitResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/UnitDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetAllUnitsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateUnitDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the unit",
            "example": "Kilogram"
          },
          "displayName": {
            "$ref": "#/components/schemas/UnitDisplayNameDto"
          },
          "description": {
            "type": "string",
            "description": "The description of the unit",
            "example": "A unit of mass"
          }
        },
        "required": [
          "name",
          "displayName"
        ]
      },
      "CreateUnitConversionDto": {
        "type": "object",
        "properties": {
          "factor": {
            "type": "number",
            "minimum": 1,
            "description": "The conversion factor",
            "example": 1.5
          }
        },
        "required": [
          "factor"
        ]
      },
      "UnitConversionDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The id of the source unit",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "to": {
            "type": "string",
            "description": "The id of the destination unit",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "factor": {
            "type": "number",
            "description": "The conversion factor",
            "example": 1.5
          }
        },
        "required": [
          "from",
          "to",
          "factor"
        ]
      },
      "GetUnitConversionResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/UnitConversionDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetAllUnitConversionsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitConversionDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateUnitConversionDto": {
        "type": "object",
        "properties": {
          "factor": {
            "type": "number",
            "minimum": 1,
            "description": "The conversion factor",
            "example": 1.5
          }
        },
        "required": [
          "factor"
        ]
      }
    }
  }
}